.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_example_basics.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_example_basics.py:


.. _example_basics:

===================================
Show basic use of slam
===================================


.. code-block:: default


    # Authors: Guillaume Auzias <guillaume.auzias@univ-amu.fr>

    # License: BSD (3-clause)
    # sphinx_gallery_thumbnail_number = 2









This script shows examples of basic functionalities offered by SLAM.
Some (most) of these are actually inherited from Trimesh
This script does not plot anything, see example_plot.py for that purpose



.. code-block:: default

    import numpy as np
    import trimesh
    import slam.io as sio

    # loading a mesh stored on the disc as a gifti file,
    # this is a feature of SLAM
    mesh = sio.load_mesh('../examples/data/example_mesh.gii')








affine transformations can be applied to mesh objects


.. code-block:: default

    mesh.apply_transform(mesh.principal_inertia_transform)
    # laplacian smoothing is available in Trimesh
    # mesh_s = sm.filter_laplacian(mesh, iterations=20)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <trimesh.Trimesh(vertices.shape=(2328, 3), faces.shape=(4652, 3))>



mesh.fill_holes() is able to fill missing face but do not handle
larger holes, see example_topology for that purpose

interesting properties / functions of a mesh
see base.py for more details
what's the euler number for the mesh?


.. code-block:: default

    print('mesh.euler_number=', mesh.euler_number)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    mesh.euler_number= 2




access mesh edges


.. code-block:: default

    mesh.edges





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    array([[   0, 1488],
           [1488, 1506],
           [1506,    0],
           ...,
           [2318, 2319],
           [2319, 2320],
           [2320, 2318]])



access mesh faces


.. code-block:: default

    mesh.faces





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    TrackedArray([[   0, 1488, 1506],
                  [   0, 1506,  656],
                  [   0,  656,  659],
                  ...,
                  [2316, 2324, 2317],
                  [2316, 2317, 2318],
                  [2318, 2319, 2320]])



access mesh vertices


.. code-block:: default

    mesh.vertices





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    TrackedArray([[ -3.57061983, -17.94052699,   4.15675116],
                  [ -4.21303892, -18.23071292,   2.84670091],
                  [  1.28853808, -15.82085613,  11.84370996],
                  ...,
                  [ -5.71436597,  19.29592131,  -9.90463253],
                  [ -5.29037668,  20.25637816,  -9.60190864],
                  [ -4.34501887,  19.65690802, -12.83836933]])



access mesh edges


.. code-block:: default

    mesh.edges





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    array([[   0, 1488],
           [1488, 1506],
           [1506,    0],
           ...,
           [2318, 2319],
           [2319, 2320],
           [2320, 2318]])



what's the area of the mesh


.. code-block:: default

    print('mesh.area=', mesh.area)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    mesh.area= 6436.883746592521




compute the area of each face


.. code-block:: default

    mesh.area_faces





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    array([1.03160007, 0.69458893, 0.64635087, ..., 0.6087503 , 0.61997348,
           1.40925126])



access mesh faces angles


.. code-block:: default

    mesh.face_angles





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    array([[2.41774571, 0.49611365, 0.22773329],
           [0.32077545, 0.52701962, 2.29379758],
           [1.13467742, 0.50239582, 1.50451941],
           ...,
           [1.5336805 , 0.88605957, 0.72185258],
           [0.77351636, 1.44372687, 0.92434943],
           [0.79314939, 1.8842767 , 0.46416657]])



access mesh volume


.. code-block:: default

    mesh.volume





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    30652.090624082153



get the face_normal of the mesh


.. code-block:: default

    mesh.face_normals





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    array([[-0.82908057, -0.27021556,  0.48949868],
           [-0.82814367, -0.27374774,  0.4891219 ],
           [-0.55380453,  0.82911912, -0.07656392],
           ...,
           [-0.98404594,  0.17680358, -0.01985127],
           [-0.99132364,  0.12302581, -0.04628271],
           [-0.99042597,  0.11478389, -0.07668803]])



get the vertex_normals of the mesh


.. code-block:: default

    mesh.vertex_normals





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    array([[-0.88029842,  0.33822583,  0.33268299],
           [-0.94299175,  0.24092184,  0.2296154 ],
           [-0.51322472, -0.72001172,  0.46710118],
           ...,
           [-0.92601497,  0.33075405, -0.18192862],
           [-0.72862022,  0.633568  , -0.26020025],
           [-0.47962995,  0.8029129 , -0.35395761]])



access mesh vertex connectivity


.. code-block:: default

    mesh.vertex_neighbors





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    array([list([1, 656, 658, 659, 1488, 1506]), list([0, 657, 658, 1488]),
           list([1533, 1534, 1543, 1614, 1617]), ...,
           list([304, 1391, 1412, 2319, 2320, 2326]),
           list([304, 306, 1412, 1444, 2325]),
           list([1391, 1393, 1412, 1431, 1435, 1444])], dtype=object)



compute mesh convex hull


.. code-block:: default

    c_h_mesh = mesh.convex_hull








kdtree of the vertices
see example_kdtree.py

mesh refinement by subdivision of face


.. code-block:: default

    mesh.subdivide()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <trimesh.Trimesh(vertices.shape=(9306, 3), faces.shape=(18608, 3))>



extract 100 mesh vertices picked at random


.. code-block:: default

    mesh.sample(100)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    array([[  2.33681316, -17.3257236 ,  10.55168407],
           [ -6.55617937,  -0.5461736 ,  16.02306568],
           [ -4.29469056,  15.72031546,  16.52984078],
           [ -6.33402304,   9.4380901 ,  22.06412645],
           [ 11.16231965,   3.18497906,  13.37145768],
           [ -1.82646743,  21.99659338,   3.74853526],
           [ -1.52005608,  22.29216587,   0.83593767],
           [  9.29900409, -10.40677226,  17.56000344],
           [ -5.72345716,  18.17565589, -11.03836318],
           [  4.03369092, -16.49641643,  12.61044161],
           [ -2.87310131, -11.76053452,  14.43728772],
           [ -7.44532584,   6.20967861, -22.1824976 ],
           [  0.82617321, -12.06838345,  -6.31365627],
           [ -7.76694587,   8.30316425, -13.75087648],
           [ -3.57029297, -10.89533542,  12.92509709],
           [ -8.41819595,   2.79314816,  20.4419457 ],
           [ -2.13367962,  21.22196086,   6.73542681],
           [  3.15367647,   6.21355518, -28.30651579],
           [ -9.87336081,   5.68332646,   5.39384177],
           [  5.62326486,   3.08710832,  24.65123922],
           [  4.4345046 , -20.80507089,   4.10920973],
           [  8.35437601, -15.50616201,  12.6966117 ],
           [  6.37495848,  -9.83968791, -23.71935251],
           [  7.33065392,  -8.99450743,  -3.71817559],
           [  0.68578044,  14.0378271 ,  19.25002219],
           [  2.50151849, -14.49964843, -25.03687619],
           [ -4.74485197,   6.39733007, -29.92824956],
           [ -7.3387092 ,  -9.85666522,  20.68855189],
           [  1.26625797, -14.87450282, -26.52857987],
           [ -6.77194424,   8.90067932,  21.31262525],
           [  6.63452484,  -2.5340013 , -13.62233072],
           [ -6.8135255 ,  -4.91230111, -31.97973085],
           [ -5.67866255,  -2.08910282,  15.76883351],
           [ -7.40475826,  11.151917  ,  17.18032527],
           [  8.92975187, -18.96895597,   4.58543822],
           [ -3.5645629 , -10.93135634,  -5.26829855],
           [  7.46860036,  -0.33462326,  22.2942785 ],
           [ -1.50561482,   9.6708428 ,  24.66372472],
           [  5.97522996,  -2.45726716, -10.91921612],
           [  6.81527656,  -4.44431447,  -0.95829959],
           [ 10.05313332,  -4.43654909,  18.01303928],
           [  4.70996557,  -6.59468786,  -7.66621412],
           [ 10.24155451,  -0.92810719,   4.81118751],
           [ -3.80331932, -16.84092732, -23.44010584],
           [ -8.23671823,  -4.37498254, -14.09867394],
           [  5.81187426,   4.51444313, -26.90996526],
           [ -9.4264077 ,  -7.91371427, -17.31531378],
           [  9.08900962,  14.54540789,   9.69749714],
           [ -6.17938654,   8.18290776,  26.73224588],
           [  5.49113712,  18.55961585,  -2.8820527 ],
           [ -2.4088614 , -12.36197559, -31.18409687],
           [ -0.81658039, -14.06073975, -29.281886  ],
           [-11.50733521,  -5.23730407,  32.06291017],
           [ -4.82904941,   0.09352844, -32.39247373],
           [  3.45454832,  -0.72826334,  28.8305044 ],
           [ -8.9726022 , -12.45632173, -26.59279152],
           [ -5.56343344,   0.14900966, -31.84165074],
           [-10.15133072,  -6.79715977,   0.5231782 ],
           [ -5.13240532,  16.09264114,  15.30360034],
           [  3.35639414,  -4.36102238, -30.60590783],
           [ -6.20933748, -16.96146149, -24.03601761],
           [ -9.21578307,   3.69792387,  13.04121792],
           [  6.33008498,  -2.5205927 ,   0.34569882],
           [  3.37808395,  18.82537711,  10.17090117],
           [ -1.18941426,  19.56631262, -13.35852362],
           [ -3.04016624, -11.78405083,  11.32851238],
           [ -7.2454103 ,  10.44289573,  18.24614542],
           [ -8.58388537,  -2.36476182,  -5.22754331],
           [  0.25399065, -16.37213049,  10.21700583],
           [  3.2096861 ,  -6.54134867,  28.54505491],
           [  2.93395384, -10.31031776, -18.66727809],
           [ -3.97102488,  22.07462556,  -5.24803016],
           [  9.80669086, -14.05474624,  -3.29173504],
           [  9.5273968 ,   7.03515626, -18.48636636],
           [ -6.11997078,  19.34422155,  -3.10501982],
           [ -0.24491141, -13.17480606, -14.28347645],
           [  8.2719471 , -15.50560626,  12.79199664],
           [  0.57011965,  15.18510317,  17.93493436],
           [ -8.83955747, -11.62145288, -26.44155994],
           [  8.34537034,  -2.42185348, -24.02365084],
           [ -9.07583168,  -6.48527264, -15.62086976],
           [  0.39744994,   6.08513532,  28.17137885],
           [ -7.51246129,   6.37532345, -21.31883297],
           [ 12.01831611,  -2.76993671,   6.01810119],
           [ -5.50126349, -11.08902023,  -8.41648125],
           [  6.41951146,  -1.02343284,   1.30457825],
           [  7.35774363,  -4.82544008, -19.10936675],
           [ -9.14382661,  -6.30057988,   4.46351528],
           [ -5.24324111,  -5.95976023,  16.55697145],
           [ -1.59797763, -10.39866499, -31.82075654],
           [  3.19974264,  19.31814792,  -7.70306384],
           [ 13.27007711,   3.87634157,  -8.06214267],
           [ -8.5083118 ,   6.09649447,  -7.37087146],
           [-11.2628094 ,  -4.78967988,  33.08882492],
           [  9.2765527 ,  -0.36915519, -11.14223577],
           [ -7.89055529,   0.0841494 ,  -9.59027906],
           [ -9.08406277,  -6.14937846, -23.94023277],
           [ -5.20970118,  -2.73984736,  18.19389892],
           [ -8.77912257,   1.22132531,  21.27476451],
           [  8.45622283,  16.2554952 ,  -4.92691815]])



voxelize the mesh


.. code-block:: default

    mesh.voxelized(2)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <trimesh.VoxelGrid(14, 23, 36)>



boundary of the mesh or list of faces


.. code-block:: default

    mesh.outline()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <trimesh.Path3D(vertices.shape=(2328, 3), len(entities)=0)>



the convex hull is another Trimesh object that is available as a property
lets compare the volume of our mesh with the volume of its convex hull


.. code-block:: default

    np.divide(mesh.volume, mesh.convex_hull.volume)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    0.7994007397533585



since the mesh is watertight, it means there is a
volumetric center of mass which we can set as the origin for our mesh


.. code-block:: default

    mesh.vertices -= mesh.center_mass








what's the moment of inertia for the mesh?


.. code-block:: default

    mesh.moment_inertia





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    array([[ 1.04733006e+07,  1.58324838e-09, -6.20881716e-11],
           [ 1.58324838e-09,  8.74194416e+06, -6.20881716e-11],
           [-6.20881716e-11, -6.20881716e-11,  3.48350686e+06]])



if there are multiple bodies in the mesh we can split the mesh by
connected components of face adjacency
since this example mesh is a single watertight body we get a list of one
mesh
mesh.split()

find groups of coplanar adjacent faces


.. code-block:: default

    facets = mesh.facets








transform method can be passed a (4,4) matrix and will cleanly apply the
transform


.. code-block:: default

    mesh.apply_transform(trimesh.transformations.random_rotation_matrix())





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <trimesh.Trimesh(vertices.shape=(2328, 3), faces.shape=(4652, 3))>



axis aligned bounding box is available


.. code-block:: default

    mesh.bounding_box.extents





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    array([63.77011616, 41.29323379, 44.62103793])



a minimum volume oriented bounding box also available
primitives are subclasses of Trimesh objects which automatically generate
faces and vertices from data stored in the 'primitive' attribute


.. code-block:: default

    mesh.bounding_box_oriented.primitive.extents
    mesh.bounding_box_oriented.primitive.transform





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    TrackedArray([[ 0.22540503,  0.15059448, -0.96255591,  0.01138398],
                  [-0.84461228, -0.46224779, -0.27010568,  1.05878112],
                  [-0.48561577,  0.87386972,  0.02300097,  0.45415415],
                  [ 0.        ,  0.        ,  0.        ,  1.        ]])



bounding spheres and bounding cylinders of meshes are also
available, and will be the minimum volume version of each
except in certain degenerate cases, where they will be no worse
than a least squares fit version of the primitive.


.. code-block:: default

    print(mesh.bounding_box_oriented.volume,
          mesh.bounding_cylinder.volume,
          mesh.bounding_sphere.volume)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    71901.85234125725 94300.0332912032 182279.8540542746





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.691 seconds)


.. _sphx_glr_download_auto_examples_example_basics.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: example_basics.py <example_basics.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: example_basics.ipynb <example_basics.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
